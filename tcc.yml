AWSTemplateFormatVersion: '2010-09-09'
Description: VPC e Subnets organizadas por camadas (Web, Aplicacao, Banco de Dados)

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: TCC-VPC

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: 10.16.0.0/20
      Tags:
        - Key: Name
          Value: PublicSubnetA

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: 10.16.16.0/20
      Tags:
        - Key: Name
          Value: PublicSubnetB

  AppPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: 10.16.32.0/20
      Tags:
        - Key: Name
          Value: AppPrivateSubnetA

  AppPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: 10.16.48.0/20
      Tags:
        - Key: Name
          Value: AppPrivateSubnetB

  DBPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: 10.16.64.0/20
      Tags:
        - Key: Name
          Value: DBPrivateSubnetA

  DBPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: 10.16.80.0/20
      Tags:
        - Key: Name
          Value: DBPrivateSubnetB

  TCCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: TCC-InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref TCCIGW

  RouterTableIGW:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: TCCRT

  RouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouterTableIGW
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref TCCIGW

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref RouterTableIGW

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref RouterTableIGW

  NatEIP:
    Type: AWS::EC2::EIP

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: TCC-NATGW

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppPrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppPrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  SGALB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permitir trafego HTTP de entrada para o ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB-SG

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: TCCALB
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref SGALB
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: TCCALB

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets para Aurora Serverless v2
      SubnetIds:
        - !Ref DBPrivateSubnetA
        - !Ref DBPrivateSubnetB
      Tags:
        - Key: Name
          Value: SubnetDB

  APPSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group do ECS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SGALB
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: APP-SG

  DBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permitir trafego apenas da propria VPC
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref APPSG
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: DB-SG

  AuroraCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-mysql
      EngineMode: provisioned
      EngineVersion: "8.0.mysql_aurora.3.04.2"
      DatabaseName: wordpress
      MasterUsername: wp_user1
      MasterUserPassword: wpadmin1
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DBSG
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0.5
        MaxCapacity: 1.0
      BackupRetentionPeriod: 1
      StorageEncrypted: true
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: Aurora-TCC

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: TCC-ECS-Cluster

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
  CloudwatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/wordpress
      RetentionInDays: 7

  WordPressTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: AuroraCluster
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      ContainerDefinitions:
        - Name: wordpress
          Image: public.ecr.aws/bitnami/wordpress:latest
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: WORDPRESS_DATABASE_HOST
              Value: !GetAtt AuroraCluster.Endpoint.Address
            - Name: WORDPRESS_DATABASE_PORT_NUMBER
              Value: '3306'
            - Name: WORDPRESS_DATABASE_NAME
              Value: wordpress
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/wordpress
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: wordpress

  WordPressTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: wordpress-tg
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200-399
      Tags:
        - Key: Name
          Value: WordPress-TG

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WordPressTargetGroup

  WordPressService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALB
      - ALBListener
      - WordPressTargetGroup
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref WordPressTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref AppPrivateSubnetA
            - !Ref AppPrivateSubnetB
          SecurityGroups:
            - !Ref APPSG
      LoadBalancers:
        - ContainerName: wordpress
          ContainerPort: 80
          TargetGroupArn: !Ref WordPressTargetGroup
